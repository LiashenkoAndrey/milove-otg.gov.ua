@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class About {
  - mainText: String
  - lastUpdated: LocalDateTime
  - id: String
  + getMainText(): String
  + getId(): String
  + getLastUpdated(): LocalDateTime
  + setId(String): void
  + setMainText(String): void
  + setLastUpdated(LocalDateTime): void
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
}
class AboutCommunityController {
  - aboutRepo: AboutRepo
  + getUpdatePage(String): String
  + getPage(): About
}
interface AboutRepo << interface >>
class AdminMetadata {
  ~ userId: String
  ~ isDocumentsPageTourCompleted: Boolean
  ~ isShowConfirmWhenDeleteDocument: Boolean
  ~ isShowModalTourWhenUserOnDocumentsPage: Boolean
  + getIsShowConfirmWhenDeleteDocument(): Boolean
  + builder(): AdminMetadataBuilder
  + getUserId(): String
  + getIsDocumentsPageTourCompleted(): Boolean
  + getIsShowModalTourWhenUserOnDocumentsPage(): Boolean
  + setUserId(String): void
  + setIsDocumentsPageTourCompleted(Boolean): void
  + setIsShowConfirmWhenDeleteDocument(Boolean): void
  + setIsShowModalTourWhenUserOnDocumentsPage(Boolean): void
  + toString(): String
}
class AdminMetadataDto {
  ~ isShowConfirmWhenDeleteDocument: Boolean
  ~ isDocumentsPageTourCompleted: Boolean
  ~ userId: String
  + getUserId(): String
  + getIsDocumentsPageTourCompleted(): Boolean
  + getIsShowConfirmWhenDeleteDocument(): Boolean
  + setUserId(String): void
  + setIsDocumentsPageTourCompleted(Boolean): void
  + setIsShowConfirmWhenDeleteDocument(Boolean): void
  + toString(): String
}
interface AdminMetadataRepo << interface >>
class AdministrationEmployee {
  - administration_group: AdministrationGroup
  - image_id: String
  + getImage_id(): String
  + getAdministration_group(): AdministrationGroup
  + setImage_id(String): void
  + setAdministration_group(AdministrationGroup): void
  + toString(): String
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
}
interface AdministrationEmployeeRepository << interface >> {
  + findAllWhereGroupIdIsNull(): List<AdministrationEmployee>
}
class AdministrationEmployeeService {
  - repository: AdministrationEmployeeRepository
  + save(AdministrationEmployee): void
  + deleteAll(List<AdministrationEmployee>): void
  + findAllWhereGroupIdIsNull(): List<AdministrationEmployee>
  + findById(Long): Optional<AdministrationEmployee>
  + deleteById(Long): void
}
class AdministrationEmployeeServiceException
interface AdministrationGroup << interface >> {
  + deleteGroupById(Long): void
  + findDtoById(Long): Optional<AdministrationGroupDto>
  + findAllWhereGroupIdIsNull(): List<AdministrationGroup>
}
class AdministrationGroup {
  - employee_list: List<AdministrationEmployee>
  - title: String
  - id: Long
  - administration_group: AdministrationGroup
  - group_list: List<AdministrationGroup>
  + setEmployee_list(List<AdministrationEmployee>): void
  + getId(): Long
  + getTitle(): String
  + getEmployee_list(): List<AdministrationEmployee>
  + getAdministration_group(): AdministrationGroup
  + getGroup_list(): List<AdministrationGroup>
  + setId(Long): void
  # canEqual(Object): boolean
  + setTitle(String): void
  + setAdministration_group(AdministrationGroup): void
  + setGroup_list(List<AdministrationGroup>): void
  + toString(): String
  + equals(Object): boolean
  + hashCode(): int
}
class AdministrationGroupDto {
  - id: Long
  - title: String
  + getId(): Long
  + getTitle(): String
  + setId(Long): void
  + setTitle(String): void
}
class AdministrationGroupService {
  - repository: AdministrationGroup
  - employeeService: AdministrationEmployeeService
  + findAllGroups(): List<AdministrationGroup>
  + findById(Long): Optional<AdministrationGroup>
  + save(AdministrationGroup): void
  + deleteById(Long): void
  - clearAndDelete(AdministrationGroup): void
}
class AdministrationGroupServiceException
class AppUser {
  - registeredOn: LocalDateTime
  - avatarContentType: String
  - lastName: String
  - avatarBase64Image: String
  - avatarUrl: String
  + getAvatarUrl(): String
  + setAvatarUrl(String): void
  + equals(Object): boolean
  + setAvatarContentType(String): void
  + toString(): String
  + setAvatarBase64Image(String): void
  # canEqual(Object): boolean
  + hashCode(): int
  + getLastName(): String
  + getRegisteredOn(): LocalDateTime
  + getAvatarContentType(): String
  + getAvatarBase64Image(): String
  + setRegisteredOn(LocalDateTime): void
  + setLastName(String): void
  + builder(): AppUserBuilder
}
class AppUserController {
  - log: Logger
  - appUserRepo: AppUserRepo
  - adminMetadataRepo: AdminMetadataRepo
  - em: EntityManager
  + setIsDocumentsPageTourCompleted(AdminMetadataDto, String): void
  + updateAdminMeta(AdminMetadata): AdminMetadata
  + getUsers(): List<User>
  + newAppUser(AppUserDto): String
  + isRegistered(String, Boolean): UserDto
  + getUserMetaById(String): UserDto
  + saveMetaData(AdminMetadata): AdminMetadata
  + getUserById(String): AppUser
}
class AppUserDto {
  - id: String
  - email: String
  - avatarUrl: String
  - base64Avatar: String
  - lastName: String
  - firstName: String
  - avatarContentType: String
  + getId(): String
  + getFirstName(): String
  + toString(): String
  + getLastName(): String
  + getEmail(): String
  + setFirstName(String): void
  + setEmail(String): void
  + getAvatarContentType(): String
  + setBase64Avatar(String): void
  + setLastName(String): void
  + setAvatarContentType(String): void
  + getBase64Avatar(): String
  + getAvatarUrl(): String
  + setAvatarUrl(String): void
  + setId(String): void
}
interface AppUserRepo << interface >>
class AuthenticationErrorHandler {
  - mapper: ObjectMapper
  + commence(HttpServletRequest, HttpServletResponse, AuthenticationException): void
}
class Banner {
  # createdOn: LocalDate
  # id: Long
  # lastUpdated: LocalDateTime
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + getId(): Long
  + getCreatedOn(): LocalDate
  + getLastUpdated(): LocalDateTime
  + setId(Long): void
  + setCreatedOn(LocalDate): void
  + toString(): String
  + setLastUpdated(LocalDateTime): void
}
class BannerDto {
  - id: Long
  - mainText: String
  - description: String
  + getId(): Long
  + getDescription(): String
  + getMainText(): String
  + setId(Long): void
  + setDescription(String): void
  + setMainText(String): void
}
interface BannerRepository << interface >>
class Chat {
  - name: String
  - picture: String
  - owner: ForumUser
  - totalMessagesAmount: Long
  - id: Long
  - totalMembersAmount: Long
  - isPrivate: Boolean
  - idAlias: String
  - description: String
  - createdOn: Date
  + getIsPrivate(): Boolean
  + equals(Object): boolean
  + getOwner(): ForumUser
  + setIsPrivate(Boolean): void
  + setName(String): void
  # canEqual(Object): boolean
  + setPicture(String): void
  + hashCode(): int
  + getId(): Long
  + setId(Long): void
  + getIdAlias(): String
  + getName(): String
  + setCreatedOn(Date): void
  + getDescription(): String
  + builder(): ChatBuilder
  + setTotalMessagesAmount(Long): void
  + setTotalMembersAmount(Long): void
  + getTotalMessagesAmount(): Long
  + setDescription(String): void
  + setOwner(ForumUser): void
  + toString(): String
  + getTotalMembersAmount(): Long
  + getCreatedOn(): Date
  + getPicture(): String
  + setIdAlias(String): void
  - pre(): void
}
class ChatController {
  - log: Logger
  - chatRepo: ChatRepo
  - chatService: ChatService
  + getAllByTopicId(Long): List<ChatDto>
  - getChatMetadata(Long, String): ChatMetadataDto
  + findOrCreatePrivateBetweenTwoForumUser(String, String): PrivateChatDto
  + getChatById(Long, String): ChatDto
  + getUserVisitedChats(String): List<ChatDtoWithMetadata>
  + newChat(NewChatDto): ChatDto
}
interface ChatDto << interface >> {
  + getTotalMembersAmount(): Long
  + getId(): Long
  + getDescription(): String
  + getCreatedOn(): String
  + getName(): String
  + getIsPrivate(): String
  + getPicture(): String
  + getOwner(): ForumUserDto
  + getTotalMessagesAmount(): Long
}
class ChatDtoWithMetadata {
  - chat: Chat
  - chatMetadata: ChatMetadata
  - privateChatMetadata: PrivateChatMetadata
  + hashCode(): int
  + equals(Object): boolean
  # canEqual(Object): boolean
  + getChat(): Chat
  + getChatMetadata(): ChatMetadata
  + getPrivateChatMetadata(): PrivateChatMetadata
  + toString(): String
  + setChat(Chat): void
  + setChatMetadata(ChatMetadata): void
  + setPrivateChatMetadata(PrivateChatMetadata): void
}
class ChatMetadata {
  - unread_messages_count: Long
  - last_read_message_id: Long
  - is_member: Boolean
  # canEqual(Object): boolean
  + equals(Object): boolean
  + hashCode(): int
  + toString(): String
  + getLast_read_message_id(): Long
  + getUnread_messages_count(): Long
  + getIs_member(): Boolean
  + setLast_read_message_id(Long): void
  + setUnread_messages_count(Long): void
  + setIs_member(Boolean): void
}
interface ChatMetadataDto << interface >> {
  + getIs_member(): Boolean
  + getLast_read_message_id(): Long
  + getUnread_messages_count(): Long
}
interface ChatRepo << interface >> {
  + findChatById(Long): ChatDto
  + getChatMetadata(Long, String): ChatMetadataDto
  + getChatWithMeta(Long, String): ChatDtoWithMetadata
  + deleteFromLastReadMessagesTable(Long): void
  + findByTopicId(Long): List<ChatDto>
}
interface ChatService << interface >> {
  + newTopicChat(NewChatDto): ChatDto
  + findPrivateChatBetweenToUsers(String, String): PrivateChatDto
  + addChatToVisitedUsersChatsOrUpdateIfExists(String, Long): void
  + getUserChatsWithMetaById(String): List<ChatDtoWithMetadata>
}
class ChatServiceImpl {
  - userChatRepo: UserChatRepo
  - privateChatRepo: PrivateChatRepo
  - log: Logger
  - em: EntityManager
  - forumUserRepo: ForumUserRepo
  - chatRepo: ChatRepo
  - privateChatToDto(PrivateChat, String): PrivateChatDto
  - parsePrivateChatMeta(String): PrivateChatMetadata
  - parseMeta(String): ChatMetadata
  + findPrivateChatBetweenToUsers(String, String): PrivateChatDto
  + getUserChatsWithMetaById(String): List<ChatDtoWithMetadata>
  + newTopicChat(NewChatDto): ChatDto
  + addChatToVisitedUsersChatsOrUpdateIfExists(String, Long): void
}
class ChatTopic {
  - id: Long
  - topic: Topic
  - chat: Chat
  # canEqual(Object): boolean
  + toString(): String
  + equals(Object): boolean
  + hashCode(): int
  + getId(): Long
  + getTopic(): Topic
  + getChat(): Chat
  + setId(Long): void
  + setTopic(Topic): void
  + setChat(Chat): void
}
class ContactEmployee {
  + toString(): String
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
}
class ContactEmployeeController {
  - repository: ContactEmployeeRepository
  + update(Long, ContactEmployee): Long
  + getAll(): List<ContactEmployee>
  + delete(Long): Long
  + create(ContactEmployee): ContactEmployee
}
class ContactEmployeeException
interface ContactEmployeeRepository << interface >>
class ControllerException
class ControllerUtil {
  + error(String): ResponseEntity<String>
  + ok(String): ResponseEntity<String>
}
class DeleteMessageDto {
  - messageId: Long
  - chatId: Long
  + getMessageId(): Long
  + getChatId(): Long
  + setMessageId(Long): void
  + setChatId(Long): void
  + toString(): String
}
class DeleteMessageImageDto {
  - chatId: Long
  - messageId: Long
  - imageId: String
  + getMessageId(): Long
  + getImageId(): String
  + getChatId(): Long
  + setMessageId(Long): void
  + setImageId(String): void
  + setChatId(Long): void
  + toString(): String
}
class Deputy {
  - district: String
  + getDistrict(): String
  + setDistrict(String): void
  + toString(): String
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
}
interface DeputyRepository << interface >>
class DeputyService {
  - repository: DeputyRepository
  + findAll(): List<Deputy>
  + findById(Long): Optional<Deputy>
  + save(Deputy): void
  + deleteById(Long): void
}
class DeputyServiceException
interface DocGroupWithOnlyId << interface >> {
  + getId(): Long
}
class Document {
  - name: String
  - id: Long
  - hashCode: Integer
  - createdOn: LocalDateTime
  - documentGroup: DocumentGroup
  - mongoId: String
  - title: String
  # canEqual(Object): boolean
  + setCreatedOn(LocalDateTime): void
  + builder(): DocumentBuilder
  + setDocumentGroup(DocumentGroup): void
  + setHashCode(Integer): void
  + getDocumentGroup(): DocumentGroup
  + setName(String): void
  + equals(Object): boolean
  + toString(): String
  + setTitle(String): void
  + hashCode(): int
  + getId(): Long
  + getMongoId(): String
  + getTitle(): String
  + setMongoId(String): void
  + getName(): String
  + getHashCode(): Integer
  + setId(Long): void
  + getCreatedOn(): LocalDateTime
}
class DocumentController {
  - mongoDocumentRepo: MongoDocumentRepo
  - documentRepo: DocumentRepo
  - documentService: DocumentService
  - log: Logger
  + searchDocs(String): List<DocumentWithGroupDto>
  + deleteDocument(Long): Document
  + updateDocumentName(Long, String): Long
}
class DocumentControllerUtil {
  + updateDocument(MultipartFile, String, String): ResponseEntity<String>
  + deleteDocument(String): ResponseEntity<String>
}
class DocumentCrudServiceException
interface DocumentDto << interface >> {
  + getId(): Long
  + getDocumentGroup(): DocGroupWithOnlyId
  + getTitle(): String
  + getName(): String
}
class DocumentGroup {
  - id: Long
  - documentGroup: DocumentGroup
  - groups: List<DocumentGroup>
  - documents: List<Document>
  - createdOn: Date
  - name: String
  + getDocumentGroup(): DocumentGroup
  + getId(): Long
  # canEqual(Object): boolean
  + toString(): String
  + setDocuments(List<Document>): void
  + getName(): String
  + getDocuments(): List<Document>
  + equals(Object): boolean
  + builder(): DocumentGroupBuilder
  + getGroups(): List<DocumentGroup>
  + setGroups(List<DocumentGroup>): void
  + getCreatedOn(): Date
  + setId(Long): void
  + setDocumentGroup(DocumentGroup): void
  + hashCode(): int
  + setName(String): void
  + setCreatedOn(Date): void
}
class DocumentGroupController {
  - documentGroupRepo: DocumentGroupRepo
  - documentService: DocumentService
  - log: Logger
  - documentGroupService: DocumentGroupService
  + deleteSubGroup(Long): Long
  + findById(Long): DocumentGroupWithGroupsDtoAndDocumentsDto
  + editSubGroup(Long, String): Long
  + newDoc(Long, MultipartFile, String): Document
  + findAll(): List<DocumentGroupWithGroupsDto>
  + createNewSubGroup(Long, String): DocumentGroupWithGroupsDtoAndDocumentsDto
}
interface DocumentGroupDto2 << interface >> {
  + getName(): String
  + getDocumentGroup(): DocumentGroupDto2
  + getId(): Long
}
class DocumentGroupNotFoundException
interface DocumentGroupRepo << interface >> {
  + findDistinctById(Long): Optional<DocumentGroupWithGroupsDtoAndDocumentsDto>
  + findDistinctByDocumentGroupIdOrderByCreatedOn(Long): List<DocumentGroupWithGroupsDto>
}
interface DocumentGroupService << interface >> {
  + deleteById(Long): void
}
class DocumentGroupServiceImpl {
  - documentService: DocumentService
  - log: Logger
  - documentGroupRepo: DocumentGroupRepo
  + deleteById(Long): void
  + deleteGroup(DocumentGroup): void
}
interface DocumentGroupWithGroupsDto << interface >> {
  + getCreatedOn(): Date
  + getName(): String
  + getId(): Long
  + getGroups(): List<DocumentGroupWithGroupsDto>
}
interface DocumentGroupWithGroupsDtoAndDocumentsDto << interface >> {
  + getGroups(): List<DocumentGroupWithGroupsDtoAndDocumentsDto>
  + getName(): String
  + getId(): Long
  + getDocuments(): List<DocumentDto>
}
interface DocumentRepo << interface >> {
  + searchDistinctByNameContainingIgnoreCaseOrTitleContainingIgnoreCase(String, String): List<DocumentWithGroupDto>
  + findByHashCode(Integer): Optional<Document>
  + documentUsedMoreThenOneTime(String): boolean
}
interface DocumentService << interface >> {
  + saveDocument(Long, MultipartFile, String): Document
  + deleteAll(List<Document>): void
  + delete(Document): void
}
class DocumentServiceImpl {
  - documentRepo: DocumentRepo
  - mongoDocumentRepo: MongoDocumentRepo
  - groupRepository: DocumentGroupRepo
  - log: Logger
  + delete(Document): void
  + deleteAll(List<Document>): void
  - save(Long, MultipartFile, String): Document
  - addToGroupAndReturn(Document, Long): void
  + saveDocument(Long, MultipartFile, String): Document
}
interface DocumentWithGroupDto << interface >> {
  + getId(): Long
  + getDocumentGroup(): DocumentGroupDto2
  + getTitle(): String
  + getName(): String
}
class Employee {
  - id: Long
  - phone_number: String
  - position: String
  - last_name: String
  - email: String
  - first_name: String
  + setLast_name(String): void
  + getPosition(): String
  + getId(): Long
  + getFirst_name(): String
  + getLast_name(): String
  + getEmail(): String
  + getPhone_number(): String
  + setId(Long): void
  + hashCode(): int
  + setPosition(String): void
  + equals(Object): boolean
  + setFirst_name(String): void
  + setPhone_number(String): void
  # canEqual(Object): boolean
  + setEmail(String): void
  + toString(): String
}
class EmployeeServiceException
class EntityMapper {
  + map(T1, T2): MapBuilder<T1, T2>
}
class ErrorMessage {
  - message: String
  + getMessage(): String
  + equals(Object): boolean
  + hashCode(): int
  + toString(): String
  + from(String): ErrorMessage
}
class ExceptionHandlerController {
  + entityNotFound(): void
  + illegalParam(): void
  + notFound(): void
}
class File {
  - format: String
  - id: Long
  - isLarge: Boolean
  - mongoFileId: String
  - name: String
  - hashCode: String
  - size: Long
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + getId(): Long
  + setId(Long): void
  + setMongoFileId(String): void
  + setSize(Long): void
  + getIsLarge(): Boolean
  + getMongoFileId(): String
  + setIsLarge(Boolean): void
  + getHashCode(): String
  + getSize(): Long
  + setHashCode(String): void
  + toString(): String
  + setFormat(String): void
  + getName(): String
  + builder(): FileBuilder
  + setName(String): void
  + getFormat(): String
}
class FileDto {
  - name: String
  - size: Long
  - format: String
  + getName(): String
  + getSize(): Long
  + getFormat(): String
  + setName(String): void
  + setSize(Long): void
  + setFormat(String): void
  + toString(): String
}
class FileNotFoundException
interface FileRepo << interface >> {
  + findFirstByHashCode(String): Optional<File>
}
class FileSavedDto {
  - isLarge: Boolean
  - mongoId: String
  - messageId: Long
  - name: String
  + setMongoId(String): void
  + getMessageId(): Long
  + getMongoId(): String
  + getName(): String
  + getIsLarge(): Boolean
  + setMessageId(Long): void
  + setName(String): void
  + setIsLarge(Boolean): void
  + builder(): FileSavedDtoBuilder
}
interface FileService << interface >> {
  + save(MultipartFile): File
  + delete(File): void
}
class FileServiceImpl {
  - mongoFileRepo: MongoFileRepo
  - fileRepo: FileRepo
  - MAX_DOCUMENT_SIZE: long
  - log: Logger
  - gridFsTemplate: GridFsTemplate
  - buildFile(MultipartFile, byte[], String): File
  + delete(File): void
  - saveSmall(MultipartFile): File
  - saveLarge(MultipartFile): File
  - getFileHashCode(byte[]): String
  + save(MultipartFile): File
}
class ForumUploadController {
  - log: Logger
  - imageRepo: MessageImageRepo
  + getImage(String): ResponseEntity<byte[]>
}
class ForumUser {
  - isOnline: Boolean
  - aboutMe: String
  - lastWasOnline: Date
  - isVerified: Boolean
  - registeredOn: Date
  - id: String
  - appUser: AppUser
  - nickname: String
  - avatar: String
  + hashCode(): int
  + setNickname(String): void
  + equals(Object): boolean
  # canEqual(Object): boolean
  + setId(String): void
  + setRegisteredOn(Date): void
  + setAboutMe(String): void
  + toString(): String
  + setLastWasOnline(Date): void
  + getLastWasOnline(): Date
  + getIsVerified(): Boolean
  + getId(): String
  + getIsOnline(): Boolean
  + setIsOnline(Boolean): void
  + setIsVerified(Boolean): void
  + getRegisteredOn(): Date
  + getNickname(): String
  + getAvatar(): String
  + builder(): ForumUserBuilder
  + setAvatar(String): void
  + getAboutMe(): String
  + setAppUser(AppUser): void
  + getAppUser(): AppUser
}
class ForumUserController {
  - forumUserRepo: ForumUserRepo
  - forumUserService: ForumUserService
  - log: Logger
  - messagingTemplate: SimpMessagingTemplate
  + getForumUserById(String): JSONObject
  + getActiveUsersAmount(): Integer
  + handleUserStopTyping(ForumUserDto): void
  + newForumUser(NewForumUserDto, String): ForumUser
  - isRegistered(String): boolean
  - getAll(): List<ForumUser>
  + notifyThatUserIsOnline(UpdateUserOnlineStatusDto): void
  + handleUserStartTyping(ForumUserDto): void
}
class ForumUserDto {
  - chatId: Long
  - id: String
  - name: String
  + getChatId(): Long
  + getId(): String
  + getName(): String
  + setChatId(Long): void
  + setId(String): void
  + setName(String): void
  + toString(): String
}
interface ForumUserDto << interface >> {
  + getId(): String
  + getIsVerified(): Boolean
  + getAvatar(): String
  + getAboutMe(): String
  + getRegisteredOn(): Date
  + getNickname(): String
}
class ForumUserNotFoundException
interface ForumUserRepo << interface >> {
  + getActiveUsersAmount(): Integer
  + updateUserOnlineStatusById(String, Boolean): int
}
interface ForumUserService << interface >> {
  + saveNewUser(NewForumUserDto, String): ForumUser
}
class ForumUserServiceImpl {
  - forumUserRepo: ForumUserRepo
  - imageRepo: ImageRepo
  - log: Logger
  - appUserRepo: AppUserRepo
  + saveNewUser(NewForumUserDto, String): ForumUser
}
class ForwardMessagesDto {
  - messagesIdList: List<Long>
  - encodedSenderId: String
  - fromChatId: Long
  - toChatsIdList: List<Long>
  + getMessagesIdList(): List<Long>
  + getFromChatId(): Long
  + getToChatsIdList(): List<Long>
  + getEncodedSenderId(): String
  + setMessagesIdList(List<Long>): void
  + setFromChatId(Long): void
  + setToChatsIdList(List<Long>): void
  + setEncodedSenderId(String): void
  + toString(): String
}
class ForwardedMessage {
  - forwardedMessage: Message
  - messageId: Long
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + getMessageId(): Long
  + getForwardedMessage(): Message
  + setMessageId(Long): void
  + setForwardedMessage(Message): void
  + builder(): ForwardedMessageBuilder
}
interface ForwardedMessageRepo << interface >>
class GlobalExceptionHandler {
  - log: Logger
  + handleNotFound(HttpServletRequest, Exception): void
}
interface IAppUserDto << interface >> {
  + getFirstName(): String
  + getLastName(): String
  + getAvatarUrl(): String
  + getId(): String
  + getAvatarBase64Image(): String
}
interface INewsDto << interface >> {
  + getDescription(): String
  + getNewsType(): NewsType
  + getImages(): List<NewsImage>
  + getDateOfPublication(): LocalDateTime
  + getViews(): Long
  + getCommentsAmount(): Long
  + getImage_id(): String
  + getId(): Long
}
class IllegalParameterException
class Image {
  - contentType: String
  - id: String
  - binaryImage: Binary
  - filename: String
  - hashCode: Integer
  # canEqual(Object): boolean
  + equals(Object): boolean
  + hashCode(): int
  + getId(): String
  + getBinaryImage(): Binary
  + getFilename(): String
  + getHashCode(): Integer
  + getContentType(): String
  + toString(): String
  + setContentType(String): void
  + setId(String): void
  + setBinaryImage(Binary): void
  + setFilename(String): void
  + setHashCode(Integer): void
}
class ImageNotFoundException
interface ImageRepo << interface >>
class ImageRepositoryException
class Institution {
  - employee_list: List<InstitutionEmployee>
  - id: Long
  - title: String
  - iconUrl: String
  - document_group: List<DocumentGroup>
  + getId(): Long
  + getTitle(): String
  + getIconUrl(): String
  + getDocument_group(): List<DocumentGroup>
  + getEmployee_list(): List<InstitutionEmployee>
  + setId(Long): void
  + setTitle(String): void
  + setEmployee_list(List<InstitutionEmployee>): void
  + toString(): String
  + builder(): InstitutionBuilder
  + setIconUrl(String): void
  + setDocument_group(List<DocumentGroup>): void
}
class InstitutionController {
  - inst_repo: InstitutionRepository
  - getAll(): List<InstitutionDto>
  - getById(Long): Institution
}
class InstitutionDto {
  - id: Long
  - title: String
  - iconUrl: String
  + getId(): Long
  + getTitle(): String
  + getIconUrl(): String
  + setId(Long): void
  + setTitle(String): void
  + setIconUrl(String): void
  + toString(): String
}
class InstitutionEmployee {
  - institution_id: Long
  - sub_institution: String
  + getInstitution_id(): Long
  + getSub_institution(): String
  + setInstitution_id(Long): void
  + setSub_institution(String): void
  + toString(): String
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
}
interface InstitutionEmployeeRepository << interface >>
class InstitutionEmployeeService {
  - institutionEmployeeRepository: InstitutionEmployeeRepository
  + deleteById(Long): void
  + save(InstitutionEmployee): InstitutionEmployee
}
class InstitutionNotFoundException
interface InstitutionRepository << interface >> {
  + getAllAsDto(): List<InstitutionDto>
}
class InstitutionService {
  - institutionRepository: InstitutionRepository
  + findInstitutionById(Long): Optional<Institution>
}
class LastReadMessageDto {
  - chatId: Long
  - userId: String
  - messageId: Long
  + getUserId(): String
  + getChatId(): Long
  + getMessageId(): Long
  + setUserId(String): void
  + setChatId(Long): void
  + setMessageId(Long): void
  + toString(): String
}
class LinkBanner {
  - text: String
  - url: String
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + getText(): String
  + getUrl(): String
  + setText(String): void
  + setUrl(String): void
  + toString(): String
  + builder(): LinkBannerBuilder
}
class LinkBannerController {
  - repo: LinkBannerRepository
  + createBanner(LinkBanner): ResponseEntity<Long>
  + delete(Long): ResponseEntity<?>
  + getAll(): List<LinkBanner>
  + update(LinkBanner): ResponseEntity<?>
}
class LinkBannerDto {
  - text: String
  - id: Long
  - url: String
  + getId(): Long
  + getUrl(): String
  + getText(): String
  + setId(Long): void
  + setUrl(String): void
  + setText(String): void
  + mapToEntity(Banner): void
}
interface LinkBannerRepository << interface >>
class Message {
  - chatId: Long
  - text: String
  - repliedMessage: Message
  - imagesList: List<MessageImage>
  - createdOn: Date
  - id: Long
  - filesList: List<MessageFile>
  - sender: ForumUser
  - fileDtoList: List<FileDto>
  - editedOn: Date
  - forwardedMessage: ForwardedMessage
  + equals(Object): boolean
  + getForwardedMessage(): ForwardedMessage
  + builder(): MessageBuilder
  + setId(Long): void
  + getRepliedMessage(): Message
  + setSender(ForumUser): void
  + setForwardedMessage(ForwardedMessage): void
  # canEqual(Object): boolean
  + setEditedOn(Date): void
  + getFileDtoList(): List<FileDto>
  + getCreatedOn(): Date
  + hashCode(): int
  + getId(): Long
  + setImagesList(List<MessageImage>): void
  + getText(): String
  + getSender(): ForumUser
  + getEditedOn(): Date
  + toString(): String
  + getImagesList(): List<MessageImage>
  + setRepliedMessage(Message): void
  + setFileDtoList(List<FileDto>): void
  + setCreatedOn(Date): void
  + getChatId(): Long
  + getFilesList(): List<MessageFile>
  + setText(String): void
  + setFilesList(List<MessageFile>): void
  + setChatId(Long): void
}
class Message {
  - targetUserName: String
  - senderName: String
  - message: String
  + getSenderName(): String
  + getMessage(): String
  + getTargetUserName(): String
  + setSenderName(String): void
  + setMessage(String): void
  + setTargetUserName(String): void
  + toString(): String
}
class MessageController {
  - messageService: MessageService
  - log: Logger
  - messageRepo: MessageRepo
  - messagingTemplate: SimpMessagingTemplate
  - forumUserRepo: ForumUserRepo
  + notifyThatMessageImageWasDeleted(DeleteMessageImageDto): void
  + getAllMessagesByChatId(MessageRequestDto): List<Message>
  + getPrevious(Long, Long): List<Message>
  + getLatestMessages(): List<Message>
  + getNewPageOfMessages(MessageRequestDto): List<Message>
  + setLastReadMessage(LastReadMessageDto): void
  + deleteMessageById(Long): Long
  + saveMessage(MessageDto): void
  + forwardMessages(ForwardMessagesDto): void
  + newMessage(MessageDto): Message
  + update(UpdateMessageDto): Long
  + notifyThatMessageWasDeleted(DeleteMessageDto): void
  + getNext(Long, Long): List<Message>
  + getLatestOfChat(Long): List<Message>
}
class MessageDto {
  - replyToMessageId: Long
  - imagesDtoList: List<MessageImageDto>
  ~ fileDtoList: List<FileDto>
  - forwardMessageId: Long
  - chatId: Long
  - senderId: String
  - text: String
  + getForwardMessageId(): Long
  + getText(): String
  + getSenderId(): String
  + getChatId(): Long
  + getImagesDtoList(): List<MessageImageDto>
  + getReplyToMessageId(): Long
  + setReplyToMessageId(Long): void
  + setFileDtoList(List<FileDto>): void
  + getFileDtoList(): List<FileDto>
  + setText(String): void
  + setImagesDtoList(List<MessageImageDto>): void
  + setForwardMessageId(Long): void
  + setSenderId(String): void
  + setChatId(Long): void
  + toString(): String
  + toEntity(MessageDto): Message
}
class MessageFile {
  - message_id: Long
  - file: File
  - id: Long
  + builder(): MessageFileBuilder
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + getId(): Long
  + getFile(): File
  + getMessage_id(): Long
  + toString(): String
  + setId(Long): void
  + setFile(File): void
  + setMessage_id(Long): void
}
class MessageFileController {
  - mongoFileRepo: MongoFileRepo
  - gridFsTemplate: GridFsTemplate
  - messageFileService: MessageFileService
  - operations: GridFsOperations
  - log: Logger
  + delete(Long): Long
  + saveFiles(MultipartFile[], Long, Long): void
  + saveFile(MultipartFile, Long, Long): void
  + getLargeFile(String, HttpServletResponse): void
  + getFile(String): ResponseEntity<byte[]>
}
interface MessageFileRepo << interface >> {
  + amountOfUsed(Long): Integer
}
interface MessageFileService << interface >> {
  + deleteById(Long): Long
  + save(MultipartFile, Long): MessageFile
  + saveFile(MultipartFile, Long, Long): void
  + saveFiles(MultipartFile[], Long, Long): void
}
class MessageFileServiceImpl {
  - fileService: FileService
  - log: Logger
  - messageFileRepo: MessageFileRepo
  - messagingTemplate: SimpMessagingTemplate
  + deleteById(Long): Long
  + save(MultipartFile, Long): MessageFile
  + saveFile(MultipartFile, Long, Long): void
  - notifyAllThatFileSaved(FileSavedDto, Long): void
  + saveFiles(MultipartFile[], Long, Long): void
}
class MessageImage {
  - message_id: Long
  - imageId: String
  - id: Long
  - lastLoaded: LocalDateTime
  - hashCode: Integer
  + getId(): Long
  + getImageId(): String
  + getHashCode(): Integer
  + getMessage_id(): Long
  + builder(): MessageImageBuilder
  + getLastLoaded(): LocalDateTime
  + setId(Long): void
  + setImageId(String): void
  + setLastLoaded(LocalDateTime): void
  + setHashCode(Integer): void
  + setMessage_id(Long): void
}
class MessageImageController {
  - messageImageService: MessageImageService
  - log: Logger
  + deleteMessageImageById(String, Long): void
}
class MessageImageDto {
  - base64Image: String
  + getBase64Image(): String
  + setBase64Image(String): void
  + toString(): String
  + toEntity(MessageImageDto): MongoMessageImage
}
interface MessageImageRepo << interface >>
interface MessageImageService << interface >> {
  + saveImages(List<MessageImageDto>): List<MessageImage>
  + deleteImagesIfNotUsedMoreThenOneTime(List<MessageImage>): void
  + deleteImageFromMessage(String, Long): void
}
class MessageImageServiceImpl {
  - messageImageRepo: MessageImageRepo
  - messageRepo: MessageRepo
  + deleteImageFromMessage(String, Long): void
  - saveIfNotExistOrGetSaved(MongoMessageImage): MongoMessageImage
  + saveImages(List<MessageImageDto>): List<MessageImage>
  + deleteImagesIfNotUsedMoreThenOneTime(List<MessageImage>): void
  + deleteImageIfNotUsedMoreThenOneTime(String): void
}
interface MessageRepo << interface >> {
  + findAllByChatId(Long, Pageable): List<Message>
  + getPrevious(Long, Long): List<Message>
  + saveLastReadMessage(Long, String, Long): void
  + updateLastReadMessage(Long, String, Long): void
  + getNext(Long, Long): List<Message>
  + lastReadMessageIsExist(Long, String): boolean
  + messageImageIsUsedMoreThenOneTime(String): boolean
  + deleteMessageImage(String, Long): void
  + getNewPageOfMessages(Long, Long, Pageable): List<Message>
}
class MessageRequestDto {
  ~ chatId: Long
  ~ pageIndex: Integer
  ~ lastReadMessageId: Long
  ~ pageSize: Integer
  + getChatId(): Long
  + getPageSize(): Integer
  + getPageIndex(): Integer
  + getLastReadMessageId(): Long
  + setChatId(Long): void
  + setPageSize(Integer): void
  + setPageIndex(Integer): void
  + setLastReadMessageId(Long): void
  + toString(): String
}
interface MessageService << interface >> {
  + saveNewMessage(MessageDto): Message
  + saveMessage(MessageDto): Message
  + forwardMessages(ForwardMessagesDto): void
  + getMessages(MessageRequestDto): List<Message>
  + deleteById(Long): Long
}
class MessageServiceImpl {
  - messageImageService: MessageImageService
  - imageService: MessageImageService
  - em: EntityManager
  - messageRepo: MessageRepo
  - chatRepo: ChatRepo
  - forwardedMessageRepo: ForwardedMessageRepo
  - messagingTemplate: SimpMessagingTemplate
  - forumUserRepo: ForumUserRepo
  - log: Logger
  - loadMessagesByLastReadMessage(MessageRequestDto): List<Message>
  - loadMessagesByDefault(MessageRequestDto): List<Message>
  - differencePlusSize(int, int): int
  + forwardMessages(ForwardMessagesDto): void
  + saveNewMessage(MessageDto): Message
  - getAfter(MessageRequestDto, int): List<Message>
  + saveMessage(MessageDto): Message
  + getMessages(MessageRequestDto): List<Message>
  + deleteById(Long): Long
  - getBefore(MessageRequestDto, int): List<Message>
}
class MongoConfig
class MongoDocument {
  - filename: String
  - contentType: String
  - id: String
  - file: Binary
  + getId(): String
  + getFilename(): String
  + getFile(): Binary
  + getContentType(): String
  + setId(String): void
  + setFilename(String): void
  + setFile(Binary): void
  + setContentType(String): void
  + toString(): String
}
interface MongoDocumentRepo << interface >> {
  + findByFilename(String): List<MongoDocument>
  + deleteByFilename(String): void
}
class MongoFile {
  - id: String
  - size: Long
  - contentType: String
  - name: String
  - file: Binary
  + getId(): String
  + getFile(): Binary
  + getContentType(): String
  + setName(String): void
  + getSize(): Long
  + getName(): String
  + setId(String): void
  + builder(): MongoFileBuilder
  + setFile(Binary): void
  + setContentType(String): void
  + setSize(Long): void
  + toString(): String
}
interface MongoFileRepo << interface >>
class MongoMessageImage {
  - id: String
  - base64Image: String
  - hashCode: Integer
  + getId(): String
  + getBase64Image(): String
  + getHashCode(): Integer
  + setId(String): void
  + setBase64Image(String): void
  + setHashCode(Integer): void
}
class MongoNewsImage {
  - binaryImage: Binary
  - contentType: String
  - hashCode: int
  - lastQueried: LocalDate
  - fileName: String
  - id: String
  + getLastQueried(): LocalDate
  + getId(): String
  + builder(): MongoNewsImageBuilder
  + getBinaryImage(): Binary
  + setBinaryImage(Binary): void
  + setFileName(String): void
  + getFileName(): String
  + getContentType(): String
  + setContentType(String): void
  + getHashCode(): int
  + setId(String): void
  + setHashCode(int): void
  + setLastQueried(LocalDate): void
  + toString(): String
}
class NewChatDto {
  - description: String
  - name: String
  - picture: String
  - topicId: Long
  - ownerId: String
  + getName(): String
  + getDescription(): String
  + getPicture(): String
  + getOwnerId(): String
  + getTopicId(): Long
  + setName(String): void
  + setDescription(String): void
  + setPicture(String): void
  + setOwnerId(String): void
  + setTopicId(Long): void
  + toDomain(NewChatDto): Chat
}
class NewCommentDto {
  - commentId: Long
  - newsId: Long
  - newsCommenter: NewsCommenter
  - text: String
  - appUserId: String
  + getCommentId(): Long
  + getNewsId(): Long
  + getAppUserId(): String
  + getNewsCommenter(): NewsCommenter
  + getText(): String
  + setNewsId(Long): void
  + setAppUserId(String): void
  + setNewsCommenter(NewsCommenter): void
  + setCommentId(Long): void
  + setText(String): void
  + toString(): String
}
class NewForumUserDto {
  ~ googleAvatar: String
  ~ nickname: String
  ~ avatarImageFile: MultipartFile
  ~ aboutMe: String
  + getGoogleAvatar(): String
  + getAvatarImageFile(): MultipartFile
  + getAboutMe(): String
  + getNickname(): String
  + setAvatarImageFile(MultipartFile): void
  + setGoogleAvatar(String): void
  + setAboutMe(String): void
  + setNickname(String): void
  + toString(): String
}
class NewNotificationDto {
  - text: String
  - authorId: String
  - message: String
  + setText(String): void
  + getMessage(): String
  + getText(): String
  + getAuthorId(): String
  + setMessage(String): void
  + setAuthorId(String): void
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
}
class NewTopicDto {
  - description: String
  - name: String
  + getName(): String
  + getDescription(): String
  + toDomain(NewTopicDto): Topic
}
class News {
  - views: Long
  - images: List<NewsImage>
  - newsType: NewsType
  - description: String
  - dateOfPublication: LocalDateTime
  - main_text: String
  - last_updated: LocalDateTime
  - commentsAmount: Long
  - id: Long
  - image_id: String
  + equals(Object): boolean
  + setMain_text(String): void
  + getLast_updated(): LocalDateTime
  + setDateOfPublication(LocalDateTime): void
  + setDescription(String): void
  + setViews(Long): void
  + setNewsType(NewsType): void
  + getImages(): List<NewsImage>
  + setLast_updated(LocalDateTime): void
  + setImages(List<NewsImage>): void
  # canEqual(Object): boolean
  + hashCode(): int
  + getId(): Long
  + getViews(): Long
  + getNewsType(): NewsType
  + setId(Long): void
  + getDescription(): String
  + getMain_text(): String
  + setCommentsAmount(Long): void
  + setImage_id(String): void
  + getDateOfPublication(): LocalDateTime
  + builder(): NewsBuilder
  + getCommentsAmount(): Long
  + toString(): String
  + getImage_id(): String
}
class NewsComment {
  - editedOn: LocalDateTime
  - commentId: Long
  - replies: List<NewsComment>
  - id: Long
  - newsId: Long
  - author: User
  - text: String
  - createdOn: LocalDateTime
  + hashCode(): int
  + getCreatedOn(): LocalDateTime
  + toString(): String
  + setText(String): void
  + getEditedOn(): LocalDateTime
  + setReplies(List<NewsComment>): void
  + equals(Object): boolean
  # canEqual(Object): boolean
  + getAuthor(): User
  + getId(): Long
  + setNewsId(Long): void
  + builder(): NewsCommentBuilder
  + getNewsId(): Long
  + setId(Long): void
  + setCreatedOn(LocalDateTime): void
  + getCommentId(): Long
  + setCommentId(Long): void
  + setAuthor(User): void
  + setEditedOn(LocalDateTime): void
  + getReplies(): List<NewsComment>
  + getText(): String
}
class NewsCommentController {
  - commentRepo: NewsCommentRepo
  - log: Logger
  - newsCommenterRepo: NewsCommenterRepo
  - appUserRepo: AppUserRepo
  - delete(Long): Long
  + newComment(NewCommentDto): NewsComment
  + getComments(Long): List<NewsComment>
}
interface NewsCommentRepo << interface >> {
  + findAllByNewsIdOrderByCreatedOnDesc(Long): List<NewsComment>
}
class NewsCommenter {
  + toString(): String
  + builder(): NewsCommenterBuilder
}
interface NewsCommenterRepo << interface >>
class NewsController {
  - newsService: NewsService
  - newsImagesService: NewsImagesService
  - newsRepository: NewsRepository
  - newsTypeRepo: NewsTypeRepo
  - log: Logger
  + deleteNewsImageById(String): ResponseEntity<String>
  + getNewsTypes(): List<NewsType>
  + saveNewsType(NewsType): NewsType
  + updateNews(Long, String, String, LocalDateTime): ResponseEntity<Long>
  + newNews(String, String, LocalDateTime, LocalDateTime, MultipartFile[], Long): ResponseEntity<Long>
  + incrementViews(Long): Long
  + deleteNewsById(Long): ResponseEntity<?>
  + updateNews(NewsDtoWithImageAndType): ResponseEntity<String>
  + getLatest(Integer, Integer): NewsPageDto
  + getNewsById(Long): News
  + getSimilarNewsByNewsId(Long): List<INewsDto>
  + newsAll(Integer, Integer): List<INewsDto>
  + deleteNewsTypeById(Long): void
  + saveNewNewsImage(Long, MultipartFile[]): List<NewsImage>
}
class NewsDTO {
  - description: String
  - newsType: String
  - images: List<NewsImageDTO>
  - views: Long
  - created: LocalDate
  - id: Long
  + getViews(): Long
  + getId(): Long
  + getDescription(): String
  + setViews(Long): void
  + getImages(): List<NewsImageDTO>
  + getCreated(): LocalDate
  + getNewsType(): String
  + setId(Long): void
  + setDescription(String): void
  + setImages(List<NewsImageDTO>): void
  + setNewsType(String): void
  + setCreated(LocalDate): void
}
class NewsDtoWithImageAndType {
  - created: String
  - image: MultipartFile
  - titleExplanation: String
  - id: Long
  - description: String
  - typeTitle: String
  - main_text: String
  - news_type_id: String
  + getId(): Long
  + getDescription(): String
  + setCreated(String): void
  + setNews_type_id(String): void
  + setDescription(String): void
  + setTypeTitle(String): void
  + toString(): String
  + getMain_text(): String
  + getCreated(): String
  + getImage(): MultipartFile
  + getTypeTitle(): String
  + getTitleExplanation(): String
  + getNews_type_id(): String
  + setMain_text(String): void
  + setImage(MultipartFile): void
  + setId(Long): void
  + setTitleExplanation(String): void
  + mapToEntity(News): void
  + toEntity(): News
}
class NewsImage {
  - newsId: Long
  - id: Long
  - fileName: String
  - mongoImageId: String
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + getId(): Long
  + setNewsId(Long): void
  + setMongoImageId(String): void
  + getFileName(): String
  + getNewsId(): Long
  + builder(): NewsImageBuilder
  + getMongoImageId(): String
  + setId(Long): void
  + setFileName(String): void
  + toString(): String
}
class NewsImageDTO {
  - newsId: Long
  - id: Long
  - mongoImageId: Long
  + getId(): Long
  + getNewsId(): Long
  + getMongoImageId(): Long
  + setId(Long): void
  + setNewsId(Long): void
  + setMongoImageId(Long): void
}
class NewsImageNotFoundException
interface NewsImageRepo << interface >> {
  + deleteByMongoImageId(String): void
  + newsImageIsUsedMoreThenOneTime(String): boolean
}
interface NewsImagesMongoRepo << interface >>
interface NewsImagesService << interface >> {
  + deleteFromMongoIfNotUsed(String): void
  + deleteAllIfNotUsed(List<NewsImage>): void
  + saveAll(List<MultipartFile>): List<NewsImage>
}
class NewsImagesServiceImpl {
  - log: Logger
  - newsImagesMongoRepo: NewsImagesMongoRepo
  - newsImageRepo: NewsImageRepo
  + deleteFromMongoIfNotUsed(String): void
  + deleteAllIfNotUsed(List<NewsImage>): void
  - saveMongoFiles(List<MultipartFile>): List<MongoNewsImage>
  - saveOrFindOfExisting(MultipartFile): MongoNewsImage
  + saveAll(List<MultipartFile>): List<NewsImage>
}
class NewsNotFoundException
class NewsPageDto {
  - news: List<INewsDto>
  - totalElements: Long
  + getNews(): List<INewsDto>
  + getTotalElements(): Long
  + setNews(List<INewsDto>): void
  + setTotalElements(Long): void
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
}
interface NewsRepository << interface >> {
  + findDistinctBy(Pageable): Page<INewsDto>
  + getLastNewsDTOByNewsTypeIdWithLimit(Long, Long, Pageable): Page<INewsDto>
  + getLatest(Pageable): Page<NewsDTO>
  + incrementViews(Long): void
}
interface NewsService << interface >> {
  + save(News, MultipartFile[], LocalDateTime): News
  + deleteById(Long): void
  + update(NewsDtoWithImageAndType): void
  + deleteNewsImageById(String): void
}
class NewsServiceException
class NewsServiceImpl {
  - newsRepository: NewsRepository
  - imageService: NewsImagesService
  - newsImageRepo: NewsImageRepo
  - newsTypeRepo: NewsTypeRepo
  - log: Logger
  + save(News, MultipartFile[], LocalDateTime): News
  + deleteById(Long): void
  + deleteNewsImageById(String): void
  + update(NewsDtoWithImageAndType): void
  - defineNewsType(NewsDtoWithImageAndType, News): void
}
class NewsType {
  - titleExplanation: String
  - id: Long
  - title: String
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + getId(): Long
  + getTitle(): String
  + getTitleExplanation(): String
  + toString(): String
}
interface NewsTypeRepo << interface >> {
  + createNewsType(String, String): void
  + getNewsTypeIdByTitle(String): Long
  + getLastInsertedIdOfNewsType(): Long
}
class Notification {
  - id: Long
  - updatedOn: Date
  - message: String
  - createdOn: Date
  - text: String
  - author: AppUser
  + getId(): Long
  + setAuthor(AppUser): void
  + toString(): String
  + getMessage(): String
  + getText(): String
  + getUpdatedOn(): Date
  + setCreatedOn(Date): void
  + getAuthor(): AppUser
  + getCreatedOn(): Date
  + setId(Long): void
  + setMessage(String): void
  + setUpdatedOn(Date): void
  # canEqual(Object): boolean
  + hashCode(): int
  + setText(String): void
  + equals(Object): boolean
}
class NotificationController {
  - log: Logger
  - repo: NotificationRepo
  - viewRepo: NotificationViewRepo
  - appUserRepo: AppUserRepo
  + createNew(NewNotificationDto, Long): Notification
  + createNew(Long): Long
  + getById(Long, Boolean, String): Notification
  + getTotalNumberOfActualNotifications(String): Long
  + createNew(NewNotificationDto): Notification
  + getAll(String): List<NotificationDtoWithViews>
}
interface NotificationDtoWithViews << interface >> {
  + getAuthor(): IAppUserDto
  + getCreatedOn(): Date
  + getUpdatedOn(): Date
  + getMessage(): String
  + getIsViewed(): Boolean
  + getId(): Long
}
interface NotificationRepo << interface >> {
  + getWithViews(String): List<NotificationDtoWithViews>
  + getTotalNumberOfActualNotifications(String): Long
}
class NotificationView {
  - userId: String
  - id: Long
  - notificationId: Long
  - readIn: Date
  + getId(): Long
  + getNotificationId(): Long
  + hashCode(): int
  + getUserId(): String
  + getReadIn(): Date
  + setId(Long): void
  + toString(): String
  + setNotificationId(Long): void
  + setUserId(String): void
  + setReadIn(Date): void
  + equals(Object): boolean
  # canEqual(Object): boolean
}
interface NotificationViewRepo << interface >> {
  + deleteAllByNotificationId(Long): void
}
class PageVote {
  - id: Long
  - voteId: Long
  + getId(): Long
  + getVoteId(): Long
  + setId(Long): void
  + setVoteId(Long): void
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
}
class PageVoteController {
  - voteRepo: VoteRepo
  - log: Logger
  - voteService: VoteService
  + getLatestVote(): Vote
  + createNewVote(Vote): Long
}
class Person {
  - firstName: String
  - note: String
  - id: Long
  - surname: String
  - phoneNumber: String
  - lastName: String
  + getId(): Long
  + getFirstName(): String
  + getLastName(): String
  + getSurname(): String
  + getPhoneNumber(): String
  + getNote(): String
  + setNote(String): void
  + setId(Long): void
  + setFirstName(String): void
  + setLastName(String): void
  + setSurname(String): void
  + setPhoneNumber(String): void
}
class Post {
  - id: Long
  - createdOn: Date
  - comments: List<PostComment>
  - text: String
  - author: ForumUser
  - imageId: String
  + equals(Object): boolean
  # canEqual(Object): boolean
  + setCreatedOn(Date): void
  + setImageId(String): void
  + toString(): String
  + hashCode(): int
  + builder(): PostBuilder
  + getId(): Long
  + getAuthor(): ForumUser
  + setId(Long): void
  + getText(): String
  + setAuthor(ForumUser): void
  + setComments(List<PostComment>): void
  + getImageId(): String
  + setText(String): void
  + getComments(): List<PostComment>
  + getCreatedOn(): Date
}
class PostComment {
  - id: Long
  - post_id: Long
  - text: String
  - author: ForumUser
  - createdOn: Date
  + equals(Object): boolean
  + setId(Long): void
  + toString(): String
  + setCreatedOn(Date): void
  # canEqual(Object): boolean
  + hashCode(): int
  + setAuthor(ForumUser): void
  + setText(String): void
  + getId(): Long
  + setPost_id(Long): void
  + getText(): String
  + builder(): PostCommentBuilder
  + getCreatedOn(): Date
  + getPost_id(): Long
  + getAuthor(): ForumUser
}
interface PostCommentDto << interface >> {
  + getAuthor(): ForumUserDto
  + getText(): String
  + getId(): Long
  + getCreatedOn(): Date
}
interface PostCommentRepo << interface >> {
  + getPostDtoById(Long): PostCommentDto
}
class PostCommentsController {
  - userRepo: ForumUserRepo
  - log: Logger
  - commentRepo: PostCommentRepo
  + newPostComment(String, String, Long): PostCommentDto
}
class PostController {
  - postRepo: PostRepo
  - log: Logger
  - imageRepo: ImageRepo
  - forumUserRepo: ForumUserRepo
  - postLikeRepo: PostLikeRepo
  + latest(String): List<PostDto>
  - newUserPost(String, MultipartFile, String): PostDto
  + deletePostById(Long): Long
  - likeOrDislikePost(String, Long): Long
}
interface PostDto << interface >> {
  + getCommentsTotalAmount(): Long
  + getImageId(): String
  + getIsUserLikedPost(): Boolean
  + getId(): Long
  + getAuthor(): ForumUserDto
  + getComments(): List<PostCommentDto>
  + getText(): String
  + getLikesAmount(): Long
  + getCreatedOn(): Date
}
class PostLike {
  - id: Long
  - user: ForumUser
  - post: Post
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + getId(): Long
  + getUser(): ForumUser
  + getPost(): Post
  + setId(Long): void
  + toString(): String
  + builder(): PostLikeBuilder
  + setUser(ForumUser): void
  + setPost(Post): void
}
interface PostLikeDto << interface >> {
  + getId(): Long
}
interface PostLikeRepo << interface >> {
  + deleteAllByPostId(Long): void
  + findDtoByUserAndPost(String, Long): Optional<PostLikeDto>
}
class PostLikesInfo {
  - isUserLiked: Boolean
  - likesAmount: Long
  + getIsUserLiked(): Boolean
  + getLikesAmount(): Long
  + setIsUserLiked(Boolean): void
  + setLikesAmount(Long): void
}
class PostRecord {
  - post: Post
  - postLikesInfo: PostLikesInfo
  + getPost(): Post
  + getPostLikesInfo(): PostLikesInfo
  + setPost(Post): void
  + setPostLikesInfo(PostLikesInfo): void
}
interface PostRepo << interface >> {
  + findPostWithLikesAndUserLikeInfo(String): List<PostDto>
  + findPostWithLikesInfo(): List<PostDto>
  + findDtoById(Long): Optional<PostDto>
}
class PrivateChat {
  - user2: ForumUser
  - chat_id: Long
  - id: Long
  - user1: ForumUser
  + equals(Object): boolean
  + toString(): String
  # canEqual(Object): boolean
  + hashCode(): int
  + getId(): Long
  + getUser1(): ForumUser
  + getUser2(): ForumUser
  + getChat_id(): Long
  + setChat_id(Long): void
  + setId(Long): void
  + setUser2(ForumUser): void
  + setUser1(ForumUser): void
}
class PrivateChatDto {
  - id: Long
  - sender: ForumUser
  - chat_id: Long
  - receiver: ForumUser
  + getId(): Long
  + getSender(): ForumUser
  + getReceiver(): ForumUser
  + getChat_id(): Long
  + setId(Long): void
  + setSender(ForumUser): void
  + hashCode(): int
  + setReceiver(ForumUser): void
  + setChat_id(Long): void
  + equals(Object): boolean
  + toString(): String
  # canEqual(Object): boolean
}
class PrivateChatMetadata {
  - userId: String
  - nickname: String
  + getNickname(): String
  + getUserId(): String
  + setNickname(String): void
  + setUserId(String): void
  + toString(): String
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
}
interface PrivateChatRepo << interface >> {
  + findPrivateChatBetweenToUsers(String, String): Optional<PrivateChat>
}
class Record {
  - dateOfVisit: LocalDate
  - person: Person
  - id: Long
  - timeOfVisit: LocalTime
  - service: Service
  + getId(): Long
  + getDateOfVisit(): LocalDate
  + getTimeOfVisit(): LocalTime
  + getPerson(): Person
  + getService(): Service
  + builder(): RecordBuilder
}
class RecordDto {
  - dateOfVisit: LocalDate
  - timeOfVisit: LocalTime
  - person: Person
  + getDateOfVisit(): LocalDate
  + getTimeOfVisit(): LocalTime
  + getPerson(): Person
  + setDateOfVisit(LocalDate): void
  + setTimeOfVisit(LocalTime): void
  + setPerson(Person): void
}
interface RecordRepository << interface >>
class ResponseHeadersFilter {
  + doFilter(ServletRequest, ServletResponse, FilterChain): void
}
class Runner {
  + main(String[]): void
}
class SecurityConfig {
  - authenticationErrorHandler: AuthenticationErrorHandler
  - makePermissionsConverter(): JwtAuthenticationConverter
  + httpSecurity(HttpSecurity): SecurityFilterChain
}
class Service {
  - id: Long
  - imageId: String
  - name: String
  - description: String
  + getDescription(): String
  + getId(): Long
  + getName(): String
  + getImageId(): String
  + setId(Long): void
  + setName(String): void
  + setDescription(String): void
  + setImageId(String): void
  + builder(): ServiceBuilder
}
class ServiceException
class Story {
  - text: String
  - imageId: String
  - id: Long
  - author: ForumUser
  - createdOn: Date
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + setImageId(String): void
  + builder(): StoryBuilder
  + setText(String): void
  + getId(): Long
  + getAuthor(): ForumUser
  + getText(): String
  + getImageId(): String
  + toString(): String
  + getCreatedOn(): Date
  + setAuthor(ForumUser): void
  + setId(Long): void
  + setCreatedOn(Date): void
}
class StoryController {
  - forumUserRepo: ForumUserRepo
  - storyRepo: StoryRepo
  - imageRepo: ImageRepo
  - log: Logger
  - newUserStory(String, MultipartFile, String): UserStoryDto
  + latest(): List<Story>
}
interface StoryRepo << interface >> {
  + findUserStoryById(Long): Optional<UserStoryDto>
}
class SubGroupDto {
  - title: String
  - id: Long
  + getId(): Long
  + getTitle(): String
  + setId(Long): void
  + setTitle(String): void
}
class TextBanner {
  - mainText: String
  - description: String
  + hashCode(): int
  + equals(Object): boolean
  # canEqual(Object): boolean
  + getDescription(): String
  + getMainText(): String
  + setDescription(String): void
  + setMainText(String): void
  + toString(): String
  + builder(): TextBannerBuilder
}
class TextBannerController {
  - repo: TextBannerRepository
  + getAll(): List<TextBanner>
  + createBanner(TextBanner): ResponseEntity<Long>
  + update(TextBanner): ResponseEntity<?>
  + delete(Long): ResponseEntity<?>
}
interface TextBannerRepository << interface >>
class Topic {
  - id: Long
  - name: String
  - description: String
  - chats: List<Chat>
  + getName(): String
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + getId(): Long
  + setChats(List<Chat>): void
  + getDescription(): String
  + toString(): String
  + getChats(): List<Chat>
  + setId(Long): void
  + setDescription(String): void
  + setName(String): void
}
class TopicController {
  - topicRepo: TopicRepo
  - log: Logger
  + getAll(): List<TopicDto>
  + getAll(Long): Topic
  - newTopic(NewTopicDto): Topic
}
interface TopicDto << interface >> {
  + getId(): Long
  + getChats(): List<ChatDto>
  + getName(): String
  + getDescription(): String
}
interface TopicRepo << interface >> {
  + getList(): List<TopicDto>
}
class UnreadMessages {
  - userId: String
  - chatId: Long
  - id: Long
  - messageId: Long
  + builder(): UnreadMessagesBuilder
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + getId(): Long
  + setUserId(String): void
  + getChatId(): Long
  + getUserId(): String
  + getMessageId(): Long
  + setId(Long): void
  + setMessageId(Long): void
  + setChatId(Long): void
  + toString(): String
}
class UpdateMessageDto {
  - chatId: Long
  - text: String
  - id: Long
  + getId(): Long
  + getText(): String
  + getChatId(): Long
  + setId(Long): void
  + setText(String): void
  + setChatId(Long): void
  + toString(): String
}
class UpdateUserOnlineStatusDto {
  - isOnline: Boolean
  - userIdThatOnlineStatusNeedsToBeUpdated: String
  - date: Date
  - userIdThatNeedsNotification: String
  + setUserIdThatNeedsNotification(String): void
  + getUserIdThatOnlineStatusNeedsToBeUpdated(): String
  + getUserIdThatNeedsNotification(): String
  + getIsOnline(): Boolean
  + getDate(): Date
  + setUserIdThatOnlineStatusNeedsToBeUpdated(String): void
  + setIsOnline(Boolean): void
  + setDate(Date): void
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
}
class Upload {
  - mongoDocumentRepo: MongoDocumentRepo
  - log: Logger
  - newsImagesMongoRepo: NewsImagesMongoRepo
  - imageRepo: ImageRepo
  + findDocumentByFilename(String, HttpServletResponse): byte[]
  + getImageV2(String, HttpServletResponse): ResponseEntity<byte[]>
  + getImage(String): ResponseEntity<byte[]>
}
class User {
  - id: String
  - email: String
  - firstName: String
  + getId(): String
  + getFirstName(): String
  + getEmail(): String
  + setId(String): void
  + setFirstName(String): void
  + setEmail(String): void
  + toString(): String
}
class UserChat {
  - lastVisitedOn: Date
  - id: Long
  - userId: String
  - chat: Chat
  + equals(Object): boolean
  # canEqual(Object): boolean
  + builder(): UserChatBuilder
  + setLastVisitedOn(Date): void
  + toString(): String
  + hashCode(): int
  + getId(): Long
  + getUserId(): String
  + getChat(): Chat
  + setChat(Chat): void
  + getLastVisitedOn(): Date
  + setId(Long): void
  + setUserId(String): void
}
interface UserChatRepo << interface >>
class UserDto {
  ~ isRegistered: Boolean
  ~ appUser: AppUser
  ~ adminMetadata: AdminMetadata
  + getIsRegistered(): Boolean
  + getAdminMetadata(): AdminMetadata
  + getAppUser(): AppUser
  + setIsRegistered(Boolean): void
  + setAdminMetadata(AdminMetadata): void
  + setAppUser(AppUser): void
  + toString(): String
}
interface UserStoryDto << interface >> {
  + getCreatedOn(): Date
  + getId(): Long
  + getAuthor(): ForumUserDto
  + getText(): String
  + getImageId(): String
}
class Util {
  + decodeUriComponent(String): String
  + encodeUriComponent(String): String
  + getFileFormat(String): String
  + createContentDispositionHeaderFromFileName(String): String
}
class UtilException
class Vote {
  - text: String
  - options: List<String>
  - authorId: String
  - createdOn: Date
  - id: Long
  + getId(): Long
  + getText(): String
  + getAuthorId(): String
  + getCreatedOn(): Date
  + toString(): String
  + getOptions(): List<String>
  + setOptions(List<String>): void
  + setId(Long): void
  + setCreatedOn(Date): void
  # canEqual(Object): boolean
  + builder(): VoteBuilder
  + setText(String): void
  + hashCode(): int
  + setAuthorId(String): void
  + equals(Object): boolean
}
class VoteCustomResponse {
  - id: Long
  - voteId: Long
  - option: String
  - respondedOn: Date
  - forumUserId: String
  + setForumUserId(String): void
  + getId(): Long
  + getForumUserId(): String
  + getVoteId(): Long
  + hashCode(): int
  + toString(): String
  + getOption(): String
  + getRespondedOn(): Date
  + setId(Long): void
  + setVoteId(Long): void
  + setOption(String): void
  + setRespondedOn(Date): void
  + equals(Object): boolean
  # canEqual(Object): boolean
}
interface VoteCustomResponseRepo << interface >> {
  + deleteAllByVoteId(Long): void
}
interface VoteRepo << interface >> {
  + getLatestPageVote(): Optional<Vote>
}
class VoteResponse {
  - id: Long
  - forumUserId: String
  - voteId: Long
  - respondedOn: Date
  + setVoteId(Long): void
  + getId(): Long
  + getForumUserId(): String
  + getVoteId(): Long
  + getRespondedOn(): Date
  + setId(Long): void
  + setForumUserId(String): void
  + setRespondedOn(Date): void
  + toString(): String
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
}
interface VoteResponseRepo << interface >> {
  + deleteAllByVoteId(Long): void
}
interface VoteService << interface >> {
  + deleteById(Long): Long
  + create(Vote): Vote
  + update(Vote): Vote
}
class VoteServiceImpl {
  - voteRepo: VoteRepo
  - customResponseRepo: VoteCustomResponseRepo
  - log: Logger
  - responseRepo: VoteResponseRepo
  + update(Vote): Vote
  + deleteById(Long): Long
  + create(Vote): Vote
}
class WebConfig {
  + addCorsMappings(CorsRegistry): void
}
class WebSocketConfig {
  + configureMessageBroker(MessageBrokerRegistry): void
  + createServletServerContainerFactoryBean(): ServletServerContainerFactoryBean
  + registerStompEndpoints(StompEndpointRegistry): void
  + configureWebSocketTransport(WebSocketTransportRegistration): void
}

AdministrationEmployee                     -[#000082,plain]-^  Employee                                  
AppUser                                    -[#000082,plain]-^  User                                      
ChatServiceImpl                            -[#008200,dashed]-^  ChatService                               
ContactEmployee                            -[#000082,plain]-^  Employee                                  
Deputy                                     -[#000082,plain]-^  Employee                                  
DocumentGroupServiceImpl                   -[#008200,dashed]-^  DocumentGroupService                      
DocumentServiceImpl                        -[#008200,dashed]-^  DocumentService                           
FileServiceImpl                            -[#008200,dashed]-^  FileService                               
ForumUserServiceImpl                       -[#008200,dashed]-^  ForumUserService                          
IllegalParameterException                  -[#000082,plain]-^  ControllerException                       
InstitutionEmployee                        -[#000082,plain]-^  Employee                                  
LinkBanner                                 -[#000082,plain]-^  Banner                                    
MessageFileServiceImpl                     -[#008200,dashed]-^  MessageFileService                        
MessageImageServiceImpl                    -[#008200,dashed]-^  MessageImageService                       
MessageServiceImpl                         -[#008200,dashed]-^  MessageService                            
NewsCommenter                              -[#000082,plain]-^  User                                      
NewsImagesServiceImpl                      -[#008200,dashed]-^  NewsImagesService                         
NewsServiceImpl                            -[#008200,dashed]-^  NewsService                               
TextBanner                                 -[#000082,plain]-^  Banner                                    
VoteServiceImpl                            -[#008200,dashed]-^  VoteService                               
@enduml
